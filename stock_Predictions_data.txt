100	10	20																							
CAL	0	121.83	122.26	123.94	122.11	120.58	127.86	123.64	118.37	124.3	126.5	120.8	119.9	127.83	125.62	132.72	124.34	125.71	125.85	118.47	124.81	118.07	127.2	127.78	128.44
UCB	0	52.34	50.89	47.62	51.16	52.4	50.79	51.02	50.99	51.3	50.21	48.66	48.9	51.13	50.09	54.07	53.89	51.1	53.08	48.54	52.24	48.99	52.44	52.03	52.48
RIT	0	100.21	99.33	102.87	110.63	110.72	109.25	105.34	112.24	111.5	109.4	114.01	120.31	125.17	123.8	131.43	131.18	128.62	130.56	136.79	129.23	142.48	103.12	101.41	110.49
UCLA	0	12.5	27.22	9.32	16.07	3.86	25.55	28.1	6.5	29.76	6.82	4.05	4.89	21.09	33.49	29.46	4.95	27.92	19.77	30.34	9.01	27.8	27.78	28.22	32.43
USC	0	249.58	244.24	242.56	245.13	245.35	237.96	244.83	244.98	250.49	244.85	232.89	251.94	230.66	233.07	235.1	236.22	231.27	235.66	245.78	248.35	248.92	235.43	229.59	235.35
UFL	0	20.21	19.77	21.34	20.21	21.17	23.53	24.87	24.76	23.53	26.1	27.75	27.86	29.88	31.57	31.32	32.45	32.06	30.19	30.78	31	30.71	30.15	32.68	32.78
UMAD	0	109.39	120.49	131.35	127.97	121.38	145.5	136.1	101.45	111.91	126.09	148.89	142.16	136.97	106.86	148.84	118.32	98.7	127.6	143.81	130.15	149.47	105.53	142.96	105.68
RICE	0	126.3	128	129.08	129.28	124.44	122.#!/usr/bin/py
import numpy as np
import os.path

def delete_record():
    target = open('record.txt', 'w')
    target.truncate()
    target.close()

def print_Record(record):
    target = open('record.txt', 'w')
    target.truncate()
    for row in record:
        for num in row:
            target.write(str(num) + ' ')
        target.write('\n')
    target.close()
    
def read_Record(K):
    record = []
    if(os.path.isfile('record.txt')): 
        target = open('record.txt', 'r')
        for a in xrange(K):
            temp = target.readline().strip().split()
            record.append([float(i) for i in temp])
    return record

def printTransactions(actions,d):
    if (d<4):
        print 0
    else:
        print len(actions)
        for action in actions:
            print action
        return 0

def create_TrainingTable(K,F,data):
    datahx = np.zeros((K,F))
    infohx = []
    yx = np.zeros((K,1))
    i=0
    for a in data: 
        datahx[i][:F] = a[:-1]
        yx[i] = a[-1]
        i+=1
    return datahx,yx  
    
def create_TestTable(K,F,data):
    datahx = np.zeros((K,F))
    yx = np.zeros((K,1))
    i=0
    for a in data: 
        datahx[i][:F] = a[1:]
        yx[i] = a[-1]
        i+=1
    return datahx,yx

def getW(datahx,yx):
    pen_l2 = 1e-10
    eye = np.eye(len(yx),len(datahx[0]))
    datahx_T = datahx.transpose()
    datahx_TInv = np.linalg.inv(np.dot(datahx_T,datahx) + (eye*penl2))
    datahx_y = np.dot(datahx_T,yx)
    w = np.dot(datahx_TInv,datahx_y)
    return w

def getPreds(W,K,F,prices):
    hxtest,last_prices = create_TestTable(K,F,prices)
    hxtest_T = hxtest.transpose()
    y_test = np.dot(hxtest,W)
    return y_test,last_prices

#change to lambda function
def transaction(y,K):
    Action = []
    sell = 'SELL'
    buy = 'BUY'
    for stock in xrange(K):
        if(y[stock]<0):
            Action.append(sell)
        else:
            Action.append(buy)
    return Action

def sort_actions(names,owned,last_prices,actions):    
#add a function to sort actions,name,owned,last_price
    stock_tuple = []
    for stock in xrange(K):
        stock_tuple.append((names[stock],owned[stock],last_prices[stock],actions[stock]))     
    stock_tuple = sorted(stock_tuple,key=lambda stock : stock[2])
    actionsS=[]
    namesS=[]
    ownedS=[]
    last_pricesS=[]
    for stock in stock_tuple:
        actionsS.append(stock[3])
        namesS.append(stock[0])
        ownedS.append(stock[1])
        last_pricesS.append(stock[2])
    return actionsS,namesS,ownedS,last_pricesS


def cuantities(K,actions,names,owned,last_prices,M):
    transaction = []
    max_bought = 5
    max_sell = 3
    for stock in xrange(K):
        if(actions[stock]=='SELL' and owned[stock]>0):
            transaction.append(names[stock] + ' SELL ' + str(int(owned[stock])))
        elif (actions[stock]=='BUY' and last_prices[stock]<M):
            to_buy = int(np.floor(M/last_prices[stock]))
            if(to_buy >max_bought ):
                to_buy = max_bought
            transaction.append(names[stock] + ' BUY ' + str(to_buy))
            M -= (to_buy*last_prices[stock])
    return transaction


if __name__ == '__main__':
    M, K, D = [float(i) for i in raw_input().strip().split()]#money,stocks,days
    K = int(K)
    D = int(D)
    names = []#name of stock
    owned = []#amount of stocks owned
    prices = []#prices of the stock the 5 last days
    for data in range(K):
        temp = raw_input().strip().split()
        names.append(temp[0])
        owned.append(int(temp[1]))
        prices.append([float(i) for i in temp[2:7]])



max_record = 10
#training to predict the last day
record = read_Record(K)
print record
if(len(record)!=0):
    if(len(record) == max_record):
        record = np.append(record[:][:-1],prices[-1])
    elif(len(record[0])!=0):
        record = np.append(record[:][:-1],prices[-1])
    else:
        print 1
        record = prices
    F=len(record[0])-1
else:
    F=4
print record

print_Record(record)

datahx,yx = create_TrainingTable(K,F,record)

W = getW(datahx,yx)
#test

y,last_prices = getPreds(W,K,F,record)
actions = transaction(y,K)

actionsS,namesS,ownedS,last_pricesS = sort_actions(names,owned,last_prices,actions)

#actions = cuantities(K,actions,names,owned,last_prices,M)
actions = cuantities(K,actionsS,namesS,ownedS,last_pricesS,M)

printTransactions(actions,D)
89   47.62   51.16
   52.4   100.21   99.33  102.87  110.63  110.72   12.5    27.22    9.32
   16.07    3.86  249.58  244.24  242.56  245.13  245.35   20.21   19.77
   21.34   20.21   21.17  109.39  120.49  131.35  127.97  121.38  126.3
  128.    129.08  129.28  124.44  102.96  103.62   98.22   96.6    99.1
  193.51  178.53  180.08  208.29  166.44]